@{
    ViewBag.Title = "Chat";
}
<h2>@ViewBag.Title</h2>
<div class="container">
    <input type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" />
    <input type="hidden" id="displayname" />
    <button id="ConnID">?</button>
    <ul id="discussion"></ul>
</div>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required if it's not referenced in _Layout.cshtml. -->
    <script src="~/Scripts/jquery-1.9.1.min.js"></script>
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            var hubName = "MY_Hub"; //NOTE - <hubName> is CAMELCASE!!! (ServerSide it's declared ChatHub)
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection[hubName]; // $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (msg) {  //NOTE - camelCase method name THE SAME called serverside .Clients.All.<methodName>(...)
                console.log('NO SentBy recived:', msg); //NOTE - reciving complex object THERE IS NO SentBy property it was HIDE by JSON.NET serializer!
                // Add the message to the page.
                appendMsg(msg);
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.
            $('#message').focus();
            // NOTE: Enable logging to show Transport type: 'webSockets', 'longPolling', 'foreverFrame', 'serverSentEvents')
            $.connection.hub.logging = true;
            // NOTE: To forse a transport + fallback call  hub.start({ transport: ['webSockets','longPolling'] })
            var connConfig = (navigator.userAgent.indexOf("Trident") > 0) /*IE*/ ? { transport: ['serverSentEvents', 'longPolling'] } : {};
            // Start the connection.
            $.connection.hub.start(connConfig).done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val()); //NOTE <methodName> is CAMELCASE!!! (ServerSide it's declared Send(...))
                    appendMsg({ name: $('#displayname').val(), message: $('#message').val() }, 'red');
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });

                $('#ConnID').click(function () {
                    chat.server.ConnID().done(function (ConnectionId) { //NOTE: remote call always return ASYNC!
                        window.alert(ConnectionId===chat.connection.id ? 'Same ID' : 'DIFFERENT ID!?');
                        console.log(ConnectionId, '===', chat.connection.id); //SAME value client-side!
                    });
                });
            });
        });
        // Add the message to the page.
        function appendMsg(msg, color) {
            color = color || 'black';
            $('#discussion').append('<li style="color:' + color +'"><strong>' 
            + $('<div />').text(msg.name).html() + '</strong>: ' 
            + $('<div />').text(msg.message).html() + '</li>');
        }

        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}
